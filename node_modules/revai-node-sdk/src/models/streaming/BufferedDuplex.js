"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
/**
 * Represents a two way buffered stream. Extends Duplex which implements both Readable and Writable
 */
class BufferedDuplex extends stream_1.Duplex {
    /**
     * @param input Buffer for the Writable side of the stream.
     * @param output Buffer for the Readable side of the stream.
     * @param options Options to be passed through to the superclass.
     */
    constructor(input, output, options) {
        super(options);
        this.input = input;
        this.output = output;
        this.areOutputHandlersSetup = false;
    }
    _write(chunk, encoding, callback) {
        return this.input.write(chunk, encoding, callback);
    }
    _read(size) {
        if (!this.areOutputHandlersSetup) {
            return this.setUpOutputHandlersAndRead(size);
        }
        return this.readOutput(size);
    }
    setUpOutputHandlersAndRead(size) {
        this.output
            .on('readable', () => {
            this.readOutput(size);
        })
            .on('end', () => {
            this.push(null);
        });
        this.areOutputHandlersSetup = true;
    }
    readOutput(size) {
        let chunk;
        while ((chunk = this.output.read(size)) !== null) {
            if (!this.push(chunk)) {
                break;
            }
        }
    }
}
exports.BufferedDuplex = BufferedDuplex;
//# sourceMappingURL=BufferedDuplex.js.map